name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Essential Security Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git-secrets

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        # Install git-secrets
        git clone https://github.com/awslabs/git-secrets.git /tmp/git-secrets
        cd /tmp/git-secrets
        sudo make install

        # Install mise for tool management
        curl https://mise.run | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        export PATH="$HOME/.local/bin:$PATH"

        # Install Python tools and dependencies
        python -m pip install --upgrade pip
        pip install detect-secrets pre-commit yamllint

        # Install project dependencies for Python security tests
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

        # Set up mise environment
        mise install

    - name: Configure git-secrets
      run: |
        # Install git-secrets hooks
        git secrets --install --force

        # Register AWS provider patterns
        git secrets --register-aws

        # Add ESPHome-specific patterns from .gitsecrets
        if [[ -f ".gitsecrets" ]]; then
          echo "Adding ESPHome-specific patterns..."
          while IFS= read -r pattern; do
            # Skip comments and empty lines
            if [[ ! "$pattern" =~ ^[[:space:]]*# ]] && [[ -n "$pattern" ]]; then
              git secrets --add "$pattern" || echo "Failed to add pattern: $pattern"
            fi
          done < .gitsecrets
        fi

        # Add allowed patterns for legitimate test credentials and documentation (using regex patterns)
        git secrets --add --allowed 'rgXTHsxFpWpqZ8keD/h0cPLN6CN2ZznLLyXwh9JgTAk=' # pragma: allowlist secret
        git secrets --add --allowed '5929ccc1f08289c79aca50ebe0a9b7eb' # pragma: allowlist secret
        git secrets --add --allowed '1SXRpeXi7AdU' # pragma: allowlist secret

        # Additional credentials found in documentation and scripts (safe for testing) - regex patterns
        git secrets --add --allowed 'QUdFI1iJUufjl00V\+seh\+sH8bZooCNHqHU4vB46c2Ac=' # pragma: allowlist secret
        git secrets --add --allowed '55977e01702437af44c5544c565fb451' # pragma: allowlist secret
        git secrets --add --allowed '3a11021250d483c5e78d0ff3e93779e3' # pragma: allowlist secret
        git secrets --add --allowed 'abcdef1234567890abcdef1234567890' # pragma: allowlist secret

        # Add allowed patterns for package-lock.json integrity hashes
        git secrets --add --allowed '"integrity":\s*"sha[0-9]+-[A-Za-z0-9+/]+=*"'

        # Add allowed patterns for test credentials
        git secrets --add --allowed 'dGVzdF9hcGlfa2V5XzEyMzQ1Njc4OTBhYmNkZWY=' # pragma: allowlist secret
        git secrets --add --allowed '1234567890abcdef1234567890abcdef' # pragma: allowlist secret
        git secrets --add --allowed 'testpassword' # pragma: allowlist secret

        # Add allowed patterns for common patterns
        git secrets --add --allowed '!secret\s+[A-Za-z0-9_]+'
        git secrets --add --allowed 'op\s+read\s+["\'"'"']?op://[^"'"'"'\s]+["\'"'"']?'
        git secrets --add --allowed 'EXAMPLE_[A-Z_]+'
        git secrets --add --allowed 'YOUR_[A-Z_]+_HERE'
        git secrets --add --allowed '"resolved":\s*"https://registry\.npmjs\.org/'
        git secrets --add --allowed 'test_[a-zA-Z0-9_]+'
        git secrets --add --allowed 'TEST_[A-Z_]+'
        git secrets --add --allowed '# pragma: allowlist secret'

    - name: Run git-secrets scan
      run: |
        echo "Running git-secrets scan..."
        if git secrets --scan-history; then
          echo "✅ No credential leaks found"
        else
          echo "❌ Potential credential leaks detected"
          exit 1
        fi

    - name: Run detect-secrets
      run: |
        echo "Running detect-secrets scan..."
        if [ -f .secrets.baseline ]; then
          echo "Using existing baseline file..."
          detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins
        else
          echo "Creating new secrets baseline..."
          detect-secrets scan --force-use-all-plugins > .secrets.baseline
          echo "Baseline created, now scanning against it..."
          detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins
        fi


    - name: Run pre-commit hooks
      run: |
        echo "Running pre-commit security hooks..."

        # Install hooks
        pre-commit install

        # Run all hooks on all files
        pre-commit run --all-files --show-diff-on-failure

    - name: Security scan summary
      if: always()
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛡️ Security Measures Active:" >> $GITHUB_STEP_SUMMARY
        echo "- Git-secrets credential scanning with ESPHome patterns" >> $GITHUB_STEP_SUMMARY
        echo "- Detect-secrets comprehensive scanning with baseline" >> $GITHUB_STEP_SUMMARY
        echo "- Pre-commit hook enforcement" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Essential security checks completed**" >> $GITHUB_STEP_SUMMARY
