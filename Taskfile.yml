version: '3'

vars:
  MINIMAL_DEVICES:
    sh: "ls *-minimal.yaml | sed 's/-minimal.yaml//'"
  ALL_DEVICES:
    sh: "ls *.yaml | sed 's/\\.yaml//' | sed 's/-full//' | sed 's/-minimal//' | sort -u"

tasks:
  default:
    cmds:
      - task -l

  # ============================================================================
  # ESSENTIAL SECURITY VALIDATION
  # Basic security checks for single-user repository
  # ============================================================================

  security-validate:
    desc: "Run essential pre-deployment security validation"
    cmds:
      - cmd: |
          echo "üîç Running essential security validation..."

          # Check if secrets.yaml exists
          if [[ ! -f "secrets.yaml" ]]; then
            echo "‚ö†Ô∏è  secrets.yaml not found - generating from 1Password..."
            task secrets
          fi

          # Run basic credential checks on YAML files
          find . -name "*.yaml" -not -path "./.esphome/*" | while read -r file; do
            ./.githooks/esphome_credential_check.py "$file" || exit 1
          done

          echo "‚úÖ Essential security validation completed"

  security-scan:
    desc: "Run basic security scan"
    cmds:
      - cmd: |
          echo "üîç Running security scan..."

          # Run git-secrets if available
          if command -v git-secrets >/dev/null 2>&1; then
            git secrets --scan
          else
            echo "‚ö†Ô∏è  git-secrets not installed - run: ./scripts/setup-security.sh"
          fi

          # Run pre-commit hooks if available
          if command -v pre-commit >/dev/null 2>&1; then
            pre-commit run --all-files
          else
            echo "‚ö†Ô∏è  pre-commit not installed - run: ./scripts/setup-security.sh"
          fi

          echo "‚úÖ Security scan completed"

  test-security:
    desc: "Run unit tests for Python security scripts"
    cmds:
      - cmd: |
          echo "üß™ Running security script tests..."
          python3 tests/run_tests.py
          echo "‚úÖ Security tests completed"

  # ============================================================================
  # EXISTING TASKS WITH BASIC SECURITY INTEGRATION
  # ============================================================================

  clean:
    desc: "Removes the build directory for a specific device. Usage: task clean -- <device>"
    cmds:
      - rm -rf .esphome/build/{{.CLI_ARGS}}

  build:
    desc: "Builds the firmware for a specific device. Usage: task build -- <device>"
    deps:
      - task: clean
        vars: { CLI_ARGS: "{{.CLI_ARGS}}" }
    cmds:
      - |
        if ls {{.CLI_ARGS}}-full.yaml >/dev/null 2>&1; then
          esphome compile {{.CLI_ARGS}}-full.yaml
        else
          esphome compile {{.CLI_ARGS}}.yaml
        fi

  upload:
    desc: "Uploads the firmware for a specific device. Usage: task upload -- <device>"
    deps:
      - task: security-validate
      - task: build
        vars: { CLI_ARGS: "{{.CLI_ARGS}}" }
    cmds:
      - cmd: |
          upload_cmd="esphome upload {{.CLI_ARGS}}.yaml"
          if [ -f "{{.CLI_ARGS}}-full.yaml" ]; then
            upload_cmd="esphome upload {{.CLI_ARGS}}-full.yaml"
          fi

          if ! output=$($upload_cmd 2>&1); then
            if echo "$output" | grep -q "Error resolving IP address" || echo "$output" | grep -q "Network is unreachable"; then
              echo "Device {{.CLI_ARGS}} offline, skipping."
            else
              echo "$output"
              exit 1
            fi
          else
            echo "$output"
          fi

  build-minimal:
    desc: "Builds the minimal firmware for a specific device. Usage: task build-minimal -- <device>"
    cmds:
      - esphome compile {{.CLI_ARGS}}-minimal.yaml

  upload-minimal:
    desc: "Uploads the minimal firmware for a specific device. Usage: task upload-minimal -- <device>"
    deps:
      - task: security-validate
      - task: build-minimal
        vars: { CLI_ARGS: "{{.CLI_ARGS}}" }
    cmds:
      - cmd: |
          if ! output=$(esphome upload {{.CLI_ARGS}}-minimal.yaml 2>&1); then
            if echo "$output" | grep -q "Error resolving IP address" || echo "$output" | grep -q "Network is unreachable"; then
              echo "Device {{.CLI_ARGS}} offline, skipping."
            else
              echo "$output"
              exit 1
            fi
          else
            echo "$output"
          fi

  build-all:
    desc: "Builds the firmware for all devices."
    deps:
      - security-validate
    cmds:
      - for: { var: ALL_DEVICES }
        task: build
        vars: { CLI_ARGS: "{{.ITEM}}" }

  upload-all-two-stage:
    desc: "Uploads the firmware for all devices in two stages."
    deps:
      - security-validate
    cmds:
      - for: { var: ALL_DEVICES }
        task: upload-two-stage
        vars: { CLI_ARGS: "{{.ITEM}}" }

  upload-two-stage:
    desc: "Uploads the firmware for a single device in two stages."
    deps:
      - security-validate
    cmds:
      - task: upload-minimal-if-exists
        vars: { CLI_ARGS: "{{.CLI_ARGS}}" }
      - task: upload
        vars: { CLI_ARGS: "{{.CLI_ARGS}}" }

  upload-minimal-if-exists:
    desc: "Uploads the minimal firmware for a specific device if it exists."
    cmds:
      - |
        if [ -f {{.CLI_ARGS}}-minimal.yaml ]; then
          task upload-minimal -- {{.CLI_ARGS}}
        fi

  build-all-minimal:
    desc: "Builds the minimal firmware for all devices."
    deps:
      - security-validate
    cmds:
      - for: { var: MINIMAL_DEVICES }
        task: build-minimal
        vars: { CLI_ARGS: "{{.ITEM}}" }

  upload-all-minimal:
    desc: "Uploads the minimal firmware for all devices."
    deps:
      - security-validate
    cmds:
      - for: { var: MINIMAL_DEVICES }
        task: upload-minimal
        vars: { CLI_ARGS: "{{.ITEM}}" }

  secrets:
    desc: "Generates secrets.yaml from 1Password"
    cmds:
      - ./scripts/generate_secrets.sh

  renovate:
    desc: "Run renovate to update dependencies"
    vars:
      GH_TOKEN:
        sh: op read --account CamiAndGeoff 'op://Private/GitHub Personal Access Token/token'
    cmds:
      - GITHUB_COM_TOKEN={{.GH_TOKEN}} RENOVATE_TOKEN={{.GH_TOKEN}} ./node_modules/.bin/renovate geoffdavis/esphome
