# ESPHome Secrets Template
# ======================
# This file serves as a template for secrets.yaml and demonstrates proper
# secret management practices for ESPHome configurations.
#
# IMPORTANT: This is a template file. Copy it to secrets.yaml and replace
# the placeholder values with your actual credentials from 1Password.
#
# DO NOT commit secrets.yaml to version control - it's already in .gitignore

# =============================================================================
# WIFI CREDENTIALS
# =============================================================================
# These credentials are used by all ESPHome devices to connect to your network
# They are referenced in common/wifi.yaml and common/wifi-minimal.yaml

# Your WiFi network name (SSID)
# Format: String (1-32 characters)
# 1Password Reference: op://Shared/Home IoT/network name
# Example: "MyHomeNetwork"
wifi_ssid: "YOUR_WIFI_SSID_HERE"

# Your WiFi network password
# Format: String (8-63 characters for WPA/WPA2)
# 1Password Reference: op://Shared/Home IoT/wireless network password
# Example: "MySecureWiFiPassword123!"
wifi_password: "YOUR_WIFI_PASSWORD_HERE"

# Your local domain name (optional but recommended)
# Format: String (domain name)
# 1Password Reference: op://Shared/Home IoT/domain name
# Example: "home.local" or "mydomain.local"
wifi_domain: "YOUR_DOMAIN_HERE"

# =============================================================================
# ESPHOME API CREDENTIALS
# =============================================================================
# These credentials secure communication between ESPHome devices and Home Assistant

# API Encryption Key - Used to encrypt communication with Home Assistant
# Format: 44-character base64 string (32 bytes encoded)
# 1Password Reference: op://Automation/ESPHome/api_key
# Generation: openssl rand -base64 32
# Example: "abcdefghijklmnopqrstuvwxyz1234567890ABCD="
# SECURITY: This key must be kept secret and rotated regularly
api_key: "YOUR_API_ENCRYPTION_KEY_HERE"

# =============================================================================
# OTA (Over-The-Air) UPDATE CREDENTIALS
# =============================================================================
# These credentials secure wireless firmware updates to your devices

# OTA Password - Used to authenticate firmware updates
# Format: 32-character hexadecimal string
# 1Password Reference: op://Automation/ESPHome/ota_password
# Generation: openssl rand -hex 16
# Example: "1234567890abcdef1234567890abcdef"
# SECURITY: This password must be kept secret and rotated regularly
ota_password: "YOUR_OTA_PASSWORD_HERE"

# =============================================================================
# FALLBACK HOTSPOT CREDENTIALS
# =============================================================================
# These credentials are used when devices can't connect to your main WiFi

# Fallback Hotspot Password - Used when device creates its own WiFi network
# Format: 12-character alphanumeric string (minimum for WPA2)
# 1Password Reference: op://Automation/ESPHome/fallback_password
# Generation: openssl rand -base64 12 | tr -d "=+/" | cut -c1-12
# Example: "AbC123XyZ789"
# SECURITY: This password allows direct access to device configuration
fallback_password: "YOUR_FALLBACK_PASSWORD_HERE"

# =============================================================================
# CREDENTIAL REQUIREMENTS AND VALIDATION
# =============================================================================
#
# API Encryption Key:
# - Must be exactly 44 characters long
# - Must be valid base64 encoding
# - Must end with '=' (padding)
# - Generated with: openssl rand -base64 32
# - Validated by: scripts/validate-secrets.sh
#
# OTA Password:
# - Must be exactly 32 characters long
# - Must contain only hexadecimal characters (0-9, a-f, A-F)
# - Generated with: openssl rand -hex 16
# - Validated by: scripts/validate-secrets.sh
#
# Fallback Password:
# - Must be at least 12 characters long
# - Must contain only alphanumeric characters (A-Z, a-z, 0-9)
# - Should be easy to type on mobile devices
# - Generated with: openssl rand -base64 12 | tr -d "=+/" | cut -c1-12
# - Validated by: scripts/validate-secrets.sh
#
# WiFi Credentials:
# - SSID: 1-32 characters, avoid special characters
# - Password: 8-63 characters for WPA/WPA2
# - Domain: Valid domain name format
# - Validated by: scripts/validate-secrets.sh

# =============================================================================
# 1PASSWORD INTEGRATION
# =============================================================================
#
# This project uses 1Password for secure credential management.
# The secrets.yaml file is generated automatically using:
#
#   ./scripts/generate_secrets.sh
#
# This script fetches credentials from the following 1Password locations:
#
# Vault: "Shared" (Account: CamiAndGeoff)
# ├── Item: "Home IoT"
# │   ├── Field: "network name" → wifi_ssid
# │   ├── Field: "wireless network password" → wifi_password
# │   └── Field: "domain name" → wifi_domain
#
# Vault: "Automation" (Account: CamiAndGeoff)
# └── Item: "ESPHome"
#     ├── Field: "api_key" → api_key
#     ├── Field: "ota_password" → ota_password
#     └── Field: "fallback_password" → fallback_password
#
# To set up 1Password integration:
# 1. Install 1Password CLI: https://developer.1password.com/docs/cli/get-started/
# 2. Sign in: op signin
# 3. Verify access: op vault list --account="CamiAndGeoff"
# 4. Generate secrets: ./scripts/generate_secrets.sh

# =============================================================================
# USAGE IN ESPHOME CONFIGURATIONS
# =============================================================================
#
# These secrets are referenced in ESPHome YAML files using the !secret directive:
#
# # In common/wifi.yaml:
# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password
#   domain: !secret wifi_domain
#   ap:
#     ssid: "${friendly_name} ESP"
#     password: !secret fallback_password
#
# api:
#   encryption:
#     key: !secret api_key
#
# ota:
#   platform: esphome
#   password: !secret ota_password
#
# NEVER hardcode these values directly in YAML files!

# =============================================================================
# SECURITY BEST PRACTICES
# =============================================================================
#
# 1. NEVER commit secrets.yaml to version control
# 2. Use 1Password for credential storage and generation
# 3. Rotate credentials regularly (see CREDENTIAL_ROTATION_GUIDE.md)
# 4. Use strong, unique passwords for each credential type
# 5. Validate credentials before deployment using scripts/validate-secrets.sh
# 6. Monitor for exposed credentials using pre-commit hooks
# 7. Use different credentials for development and production
# 8. Keep backup copies of working credentials in 1Password history
# 9. Test credential changes in a controlled manner
# 10. Document all credential rotations with timestamps

# =============================================================================
# DEVICE-SPECIFIC CONSIDERATIONS
# =============================================================================
#
# ESP32 Devices:
# - Use full wifi.yaml configuration
# - Support all features (API, web server, sensors)
# - Direct deployment with task upload -- <device>
#
# ESP01 Devices (1MB Flash):
# - Use wifi-minimal.yaml for initial deployment
# - Two-stage deployment: minimal → full
# - Deploy with task upload-two-stage -- <device>
# - Limited flash requires careful firmware management
#
# All devices use the same credentials but different deployment strategies.

# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Common Issues:
#
# 1. Invalid API Key Format:
#    - Must be 44 characters, base64 encoded
#    - Generate new: openssl rand -base64 32
#
# 2. Invalid OTA Password Format:
#    - Must be 32 characters, hexadecimal only
#    - Generate new: openssl rand -hex 16
#
# 3. Weak Fallback Password:
#    - Must be at least 12 characters, alphanumeric
#    - Generate new: openssl rand -base64 12 | tr -d "=+/" | cut -c1-12
#
# 4. 1Password Access Issues:
#    - Verify authentication: op account list
#    - Check vault access: op vault list --account="CamiAndGeoff"
#    - Test item access: op item get "ESPHome" --vault="Automation"
#
# 5. Device Connection Issues:
#    - Verify WiFi credentials are correct
#    - Check device is on same network
#    - Try fallback hotspot access
#
# For detailed troubleshooting, see:
# - CREDENTIAL_ROTATION_GUIDE.md
# - SECURITY_IMPLEMENTATION.md

# =============================================================================
# VALIDATION AND TESTING
# =============================================================================
#
# Before using these credentials, validate them with:
#
#   ./scripts/validate-secrets.sh
#
# This script will check:
# - Credential format compliance
# - 1Password reference resolution
# - Security best practices
# - Integration with existing workflow
#
# For comprehensive testing:
#
#   ./scripts/validate-1password-structure.sh  # Check 1Password setup
#   ./scripts/setup-dev-secrets.sh            # Set up development environment
#   ./scripts/track-secret-rotation.sh        # Check rotation status

# =============================================================================
# CREDENTIAL ROTATION
# =============================================================================
#
# Credentials should be rotated regularly for security:
#
# - API Keys: Every 90 days or after exposure
# - OTA Passwords: Every 90 days or after exposure  
# - Fallback Passwords: Every 180 days or after exposure
# - WiFi Credentials: As needed or after exposure
#
# Use the two-step rotation process documented in CREDENTIAL_ROTATION_GUIDE.md:
# 1. Deploy new credentials using old credentials
# 2. Final deployment with new credentials only
#
# Track rotations with: ./scripts/track-secret-rotation.sh

# =============================================================================
# DEVELOPMENT SETUP
# =============================================================================
#
# For new developers:
#
# 1. Install dependencies:
#    ./scripts/setup-dev-secrets.sh
#
# 2. Configure 1Password access:
#    op signin
#    op account add --address my.1password.com --email your@email.com
#
# 3. Generate initial secrets:
#    ./scripts/generate_secrets.sh
#
# 4. Validate setup:
#    ./scripts/validate-secrets.sh
#    ./scripts/validate-1password-structure.sh
#
# 5. Test with a device:
#    task upload -- test_device

# =============================================================================
# BACKUP AND RECOVERY
# =============================================================================
#
# Backup procedures:
# - 1Password automatically maintains credential history
# - Use scripts/backup-secrets.sh for additional backups
# - Document working configurations before changes
#
# Recovery procedures:
# - Restore from 1Password history
# - Use emergency access procedures in CREDENTIAL_ROTATION_GUIDE.md
# - Rollback using scripts/backup-secrets.sh restore functionality

# End of secrets.yaml.example