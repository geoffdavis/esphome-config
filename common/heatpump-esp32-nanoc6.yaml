---
# Configuration defaults for an ESP32-C6 NanoC6 board that monitors a Mitsubishi
# heat pump.

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  platformio_options:
    board_build.flash_mode: dio
    board_build.extra_flags:
      - "-DARDUINO_USB_CDC_ON_BOOT=0"
  on_boot:
    priority: -100
    then:
      - switch.turn_on: led_status_automation
      - logger.log: "LED status automation enabled on boot"

esp32:
  board: esp32-c6-devkitc-1
  variant: esp32c6
  flash_size: 4MB
  framework:
    type: esp-idf

# UART configuration for the ESP32-C6 NanoC6 board
uart:
  id: HP_UART
  baud_rate: 2400
  tx_pin: GPIO1
  rx_pin: GPIO2

# Enable logging
logger:
  # ESP32 has multiple UARTs, so we can enable serial logging
  # Set the logging level and specify which components to log
  # Set to INFO to see basic operation, WARN to see warnings, or DEBUG for
  # detailed debugging information.
  # Adjust the logging level as needed for your debugging purposes.
  # For example, set to DEBUG to see detailed logs for the CN105 component.
  # For production use, you might want to set it to WARN or ERROR.
  # If you want to see all logs, set level to DEBUG and adjust individual
  # component logs accordingly.
  # Note: DEBUG level can produce a lot of output, so use it judiciously
  #       especially in production environments.
  #       INFO level is usually sufficient for normal operation.
  #       WARN level is useful for catching potential issues without
  #       overwhelming logs.
  #       ERROR level is for critical issues only.
  #       Adjust the logs below to control the verbosity of specific
  #       components.
  #       For example, set CYCLE to INFO to see cycle times, or DEBUG for
  #       detailed cycle information.
  #       Set climate to WARN to see warnings related to climate control.
  #       Set sensor to INFO to see sensor readings, or DEBUG for detailed
  #       sensor information.
  #       Set WRITE and READ to WARN to see write/read operations, or DEBUG
  #       for detailed operations.
  #       Set Header to INFO to see header information, or DEBUG for detailed
  #       header information.
  #       Set Decoder to DEBUG to see detailed decoding information, or INFO
  #       for basic decoding.
  #       Set CONTROL_WANTED_SETTINGS to INFO to see control settings, or
  #       DEBUG for detailed control settings.
  #       Adjust these settings based on your needs and the verbosity you
  #       require.
  level: INFO
  logs:
    EVT_SETS: INFO
    WIFI: INFO
    MQTT: INFO
    WRITE_SETTINGS: INFO
    SETTINGS: INFO
    STATUS: INFO
    CN105Climate: INFO
    CN105: INFO
    # Set this to INFO to see how long your cycle times are taking
    CYCLE: WARN
    climate: WARN
    sensor: INFO
    chkSum: INFO
    WRITE: WARN
    READ: WARN
    Header: INFO
    Decoder: INFO
    CONTROL_WANTED_SETTINGS: INFO
#  level: DEBUG
#  logs:
#    EVT_SETS : DEBUG
#    WIFI : INFO
#    MQTT : INFO
#    WRITE_SETTINGS : DEBUG
#    SETTINGS : DEBUG
#    STATUS : INFO
#    CN105Climate: WARN
#    CN105: DEBUG
#    climate: WARN
#    sensor: WARN
#    chkSum : INFO
#    WRITE : WARN
#    READ : WARN
#    Header: INFO
#    Decoder : DEBUG
#    CONTROL_WANTED_SETTINGS: DEBUG

# Blue LED status indicator on GPIO7
output:
  - platform: gpio
    pin: GPIO7
    id: blue_led_output
  - platform: gpio
    pin: GPIO19
    id: neopixel_power_output

# (Removed power_supply wrapper â€” using a GPIO-controlled output + switch instead)

light:
  - platform: binary
    name: "${friendly_name} Status LED"
    id: status_led
    output: blue_led_output
    restore_mode: RESTORE_DEFAULT_OFF

  # WS2812 (NeoPixel) on NanoC6 (use RMT driver for ESP-IDF)
  - platform: esp32_rmt_led_strip
    chipset: WS2812
    pin: GPIO20
    num_leds: 1
    name: "${friendly_name} NeoPixel"
    id: neopixel_light
    rgb_order: GRB
    restore_mode: RESTORE_DEFAULT_OFF

# Switch to control LED status automation
switch:
  - platform: template
    name: "${friendly_name} LED Status Automation"
    id: led_status_automation
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    turn_on_action:
      - logger.log: "LED status automation enabled"
    turn_off_action:
      - logger.log: "LED status automation disabled"
      - light.turn_off: status_led

  - platform: output
    output: neopixel_power_output
    name: "${friendly_name} NeoPixel Power"
    id: neopixel_power_switch
    restore_mode: RESTORE_DEFAULT_OFF

# Main button (GPIO9) - double click to toggle NeoPixel power and light
# Single click to reboot
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
    name: "${friendly_name} Main Button"
    id: neopixel_button
    on_multi_click:
      - timing:
          - ON for 1s to 2s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single Long Clicked - restarting"
          - delay: 50ms
          - button.press: restart_button
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single Short Clicked - toggling light"
          - switch.toggle: neopixel_power_switch
          - delay: 50ms
          - if:
              condition:
                switch.is_on: neopixel_power_switch
              then:
                - light.turn_on: neopixel_light
              else:
                - light.turn_off: neopixel_light

# Status LED automation to indicate device states
interval:
  - interval: 1s
    then:
      - if:
          condition:
            switch.is_on: led_status_automation
          then:
            - logger.log: "LED automation is ON, checking WiFi status"
            - if:
                condition:
                  wifi.connected:
                then:
                  # WiFi connected - solid on
                  - logger.log: "WiFi connected - turning LED ON"
                  - light.turn_on: status_led
                else:
                  # WiFi disconnected - blink
                  - logger.log: "WiFi disconnected - toggling LED"
                  - light.toggle: status_led
          else:
            - logger.log: "LED automation is OFF - no action"
